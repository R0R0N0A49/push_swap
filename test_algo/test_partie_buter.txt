int	*ft_sort_2(int *tab_b, int len, int mid_len)
{
	int	i;
	int	j;

	i = 1;
	j = 0;
	while (i <= len / 2)
	{
		if (tab_b[0] < tab_b[1])
		{
			tab_b = ft_swap(tab_b, 'b', len);
			i = 0;
		}
		if (len > 2 && tab_b[0] > mid_len)
		{
			tab_b = ft_rotate(tab_b, 'b', len);
			i = 0;
		}
		i++;
	}
	i = (len - 1);
	while (j == 0 && i == len / 2)
	{
		while (len > 2 && i > len / 2)
		{
			if (tab_b[len - 2] > tab_b[len - 1])
			{
				tab_b = ft_reverse(tab_b, 'b', len);
				tab_b = ft_reverse(tab_b, 'b', len);
				tab_b = ft_swap(tab_b, 'b', len);
				j += 2;
			}
			i--;
		}
		while (j > 0)
		{
			if (tab_b[0] < mid_len)
				tab_b = ft_swap(tab_b, 'b', len);
			else
			{
				tab_b = ft_rotate(tab_b, 'b', len);
				j--;
			}
		}
	}
	return (tab_b);
}

/* int	ft_chunk(int len)
{
	if (len > 249)
		return (len / 2); 
	return (len);
}

void	ft_push_swap(int *tab_a, int len_a)
{
	int	*tab_b;
	int	len_b;
	int	len_chunk;
	int	chunk;
	int	i;

	if (ft_order(tab_a, len_a, 0, 0) == 0)
	{
		free (tab_a);
		return ;
	}
	len_b = 0;
	chunk = 0;
	tab_b = NULL;
	len_chunk = ft_chunk(len_a);
	i = 0;
	while (len_a > 0)
	{
		while (i < len_chunk && 0 < len_a)
		{
			tab_b = ft_push(tab_b, tab_a, len_b++, 'b');
			tab_a = ft_malloc_push(tab_a, len_a--);
			if (len_b > 1 && tab_b[0] % 2 == 0)
				tab_b = ft_rotate(tab_b, 'b', len_b); 
			i++;
		}
		while (ft_first_half(tab_b, len_b))
			tab_b = ft_sort_first_half(tab_b, len_b);
			tab_b = ft_sort_1(tab_b, len_b);
		i = 0;
		chunk++;
	}
	ft_end(&tab_a, &tab_b, len_a, len_b);
	if (tab_b != NULL)
		free(tab_b);
	free(tab_a);
} */


/* void	ft_end(int **tab_a, int **tab_b, int len_a, int len_b)
{
	while (len_b > 0)
	{
		if (len_b >= 2 && tab_b[0][len_b - 1] > tab_b[0][0])
		{
			*tab_b = ft_reverse(*tab_b, 'b', len_b);
			*tab_a = ft_push(*tab_a, *tab_b, len_a++, 'a');
			*tab_b = ft_malloc_push(*tab_b, len_b--);
		}
		else
		{
			*tab_a = ft_push(*tab_a, *tab_b, len_a++, 'a');
			*tab_b = ft_malloc_push(*tab_b, len_b--);
		}
	}
} */

/* int	ft_average(int	*tab_a, int len_chunk, int len)
{
	int				i;
	unsigned int	result;

	result = 0;
	i = 0;
	while (i < (len - 1) && i < len_chunk)
	{
		result += tab_a[i];
		i++;
	}
	result /= len_chunk;
	return (result);
} */

/* int	*ft_sort_first_half(int *tab_b, int len)
{
	int	i;
	static int	j;

	i = ft_first_half(tab_b, len);
	while (i > 1)
	{
		tab_b = ft_rotate(tab_b, 'b', len);
		i--;
		j++;
	}
	tab_b = ft_swap(tab_b, 'b');
	while (j > 0)
	{
		tab_b = ft_reverse(tab_b, 'b', len);
		if (tab_b[1] > tab_b[0])
			tab_b = ft_swap(tab_b, 'b');
		else if (tab_b[1] < tab_b[0])
			return (tab_b);
		j--;
	}
	return (tab_b);
} */

//int	*ft_sort(int *tab_b, int len)
//{
//	int	i;
//	static int	j;
//
//	i = ft_second_half(tab_b, len);
//	j = 0;
//	while (i > 1)
//	{
//		tab_b = ft_rotate(tab_b, 'b', len);
//		i--;
//		j++;
//	}
//	tab_b = ft_swap(tab_b, 'b');
//	while (j > 0)
//	{
//		tab_b = ft_reverse(tab_b, 'b', len);
//		if (tab_b[1] > tab_b[0])
//			tab_b = ft_swap(tab_b, 'b');
///* 		else if (tab_b[1] < tab_b[0])
//			return (tab_b); */
//		j--;
//	}
//	return (tab_b);
//}
//
//int	*ft_sort_1(int *tab_b, int len)
//{
//	int	i;
//
//	i = len / 2;
//	if (len % 2 != 0)
//		i += 1;
//	while (i)
//	{
//		tab_b = ft_reverse(tab_b, 'b', len);
//		i--;
//	}
//	while (ft_second_half(tab_b, len))
//		tab_b = ft_sort(tab_b, len);
//	while (tab_b[0] < tab_b[1])
//		tab_b = ft_rotate(tab_b, 'b', len);
//	return (tab_b);
//}

/* void	ft_push_b(int **tab_a, int **tab_b, int *len_a, int *len_b)
{
	int i;
	int j;

	i = ft_locate(tab_a[0][0], tab_b[0], *len_b);
	if (i <= *len_b / 2)
	{
		j = i;
		while (i > 0)
		{
			tab_b[0] = ft_rotate(tab_b[0], 'b', *len_b);
			i--;
		}
		tab_b[0] = ft_push(tab_b[0], tab_a[0], *len_b++ ,'b');
		tab_a[0] = ft_malloc_push(tab_a[0], *len_a--);
		while (j > 0)
		{
			tab_b[0] = ft_reverse(tab_b[0], 'b', *len_b);
			j--;
		}
	}
	else if (i > *len_b / 2)
	{
		i = *len_b - i;
		j = i;
		while (i > 0)
		{
			tab_b[0] = ft_reverse(tab_b[0], 'b', *len_b);
			i--;
		}
		tab_b[0] = ft_push(tab_b[0], tab_a[0], *len_b++, 'b');
		tab_b[0] = ft_malloc_push(tab_a[0], *len_a--);
		while (j > 0)
		{
			tab_b[0] = ft_rotate(tab_b[0], 'b', *len_b);
		}
	}
}

void	ft_sort_a(int **tab_a, int **tab_b, int *len_a, int *len_b)
{
	int i;

	i = ft_first_a(tab_a[0], *len_a - 1);
	if ((*len_a > 1 && *len_b > 1) && (ft_first_b(tab_b[0], *len_b - 1) == 1 && ft_first_a(tab_a[0], *len_a - 1) == 1))
			ft_rr(&tab_a[0], &tab_b, *len_a, *len_b);
	else if (*len_a > 1 && i == 1)
		tab_a[0] = ft_rotate(tab_a[0], 'a', len_a);
	else if ((*len_a > 1 && *len_b > 1) && (ft_first_b(tab_b[0], *len_b - 1) == 2 && ft_first_a(tab_a[0], *len_a - 1) == -1))
		ft_rrr(&tab_a[0], &tab_b, *len_a, *len_b);
	else if (*len_a > 1 && i == -1)
		tab_a[0] = ft_reverse(tab_a[0], 'a', len_a);
	else if ((*len_a > 1 && *len_b > 1) && (tab_a[0][0]) > (tab_a[0][1]) && *len_b > 1 && (tab_b[0][0]) < (tab_b[0][1]))
		ft_ss(&tab_a[0], &tab_b[0]);
	else if (len_a > 1 && (tab_a[0][0]) > (tab_a[0][1]))
		tab_a[0] = ft_swap(tab_a[0], 'a');
	else
		ft_push_b(&tab_a[0], &tab_b[0], &len_a, &len_b);
}

void	algo_for_ten(int tab_a, int len_a)
{
	int	*tab_b;
	int	len_b;

	tab_b = NULL;
	len_b = 0;
	while (ft_order(tab_a, len_a, len_b, 0))
	{
		while (ft_order(tab_a, len_a, len_b, 1))
		{
			ft_sort_a(&tab_a, &tab_b, &len_a, &len_b);
//			while (tab_b && ft_order_reverse(tab_b, len_b))
//			{
//				if ((len_a > 1 && len_b > 1) && (ft_first_b(tab_b, len_b - 1) == 1 && ft_first_a(tab_a, len_a - 1) == 1))
//					ft_rr(&tab_a, &tab_b, len_a, len_b);
//				else if (len_b > 1 && ft_first_b(tab_b, len_b - 1) == 1)
//					tab_b = ft_rotate(tab_b, 'b', len_b);
//				else if ((len_a > 1 && len_b > 1) && (ft_first_b(tab_b, len_b - 1) == -1 && ft_first_a(tab_a, len_a - 1) == -1))
//					ft_rrr(&tab_a, &tab_b, len_a, len_b);
//				else if (len_b > 1 && ft_first_b(tab_b, len_b - 1) == -1)
//					tab_b = ft_reverse(tab_b, 'b', len_b);
//				else if ((len_a > 1 && len_b > 1) && (tab_a[0]) > (tab_a[1]) && len_b > 1 && (tab_b[0]) < (tab_b[1]))
//					ft_ss(&tab_a, &tab_b);
//				else if (len_b > 1 && (tab_b[0]) < (tab_b[1]))
//					tab_b = ft_swap(tab_b, 'b');
//				else
//					break ;
//			}
			while (len_b > 1 && ft_order_reverse(tab_b, len_b))
			{
				i = ft_first_b(tab_b, len_b);
				if (i == 1)
					tab_b = ft_rotate(tab_b, 'b', len_b);
				else if (i == -1)
				{
					tab_b = ft_reverse(tab_b, 'b', len_b);
					tab_b = ft_swap(tab_b, 'b');
					tab_b = ft_rotate(tab_b, 'b', len_b);
					tab_b = ft_rotate(tab_b, 'b', len_b);
				}
				else if (i == 2)
					tab_b = ft_reverse(tab_b, 'b', len_b);
				else if (i == -2)
				{	
					tab_b = ft_rotate(tab_b, 'b', len_b);
					tab_b = ft_swap(tab_b, 'b');
					tab_b = ft_reverse(tab_b, 'b', len_b);
					if (tab_b[0] < tab_b[1])
						tab_b = ft_swap(tab_b, 'b');
				}
				else
					break;
			}
		} 
		if (len_b > 0 && ft_order(tab_a, len_a, len_b, 1) == 0)
		{
			if (tab_b[0] < tab_b[len_b - 1])
				tab_b = ft_reverse(tab_b, 'b', len_b);
			tab_a = ft_push(tab_a, tab_b, len_a++, 'a');
			tab_b = ft_malloc_push(tab_b, len_b--);
		}
	}
	if (tab_b)
		free(tab_b);
	free(tab_a);
} */